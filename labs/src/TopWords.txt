Коллекции в Java представляют собой классы и интерфейсы,
которые служат для хранения и управления группами объектов. Они
позволяют удобно и эффективно работать с данными, осуществлять поиск,
добавление, удаление и изменение элементов коллекции. В Java
существует несколько основных интерфейсов коллекций:
1. Collection - базовый интерфейс коллекций, который содержит
методы для работы с элементами коллекции.
2. List - интерфейс, который представляет упорядоченную
коллекцию элементов, которые могут содержать дубликаты.
3. Set - интерфейс, который представляет неупорядоченную
коллекцию элементов, которые не могут содержать дубликаты.
4. Map - интерфейс, который представляет отображение ключ-
значение.
ArrayList и LinkedList — это две коллекции в Java, которые
используются для доступа по индексу элемента.
ArrayList — это список, реализованный на основе массива,
а LinkedList — это классический связный список, основанный на объектах
с ссылками между ними.
Различия между ArrayList и LinkedList заключаются в том, что ArrayList
основан на массиве, а LinkedList на связном списке. ArrayList обеспечивает
быстрый доступ к элементам по индексу, но медленно работает при
добавлении или удалении элементов из середины списка. LinkedList
обеспечивает быстрое добавление и удаление элементов из середины
списка, но медленно работает при доступе к элементам по индексу.
Примеры использования коллекций в Java:
1. Создание списка и добавление элементов:
List<String> list = new ArrayList<> ();
list.add("apple");
list.add("banana");
list.add("orange");
2. Использование цикла для обхода элементов списка:
for (String fruit : list) {
System.out.println(fruit);
}
3. Удаление элемента из списка:
list.remove("banana");
Дженерики в Java позволяют создавать обобщенные классы и
методы, которые могут работать с различными типами данных. Они
позволяют повысить безопасность и удобство программирования, так как
компилятор проверяет типы данных на этапе компиляции. Примеры
использования дженериков в коллекциях и методах:
1. Объявление списка с использованием дженериков:
List<Integer> numbers = new ArrayList<>();
2. Использование дженериков в методе:
public static <T> T getFirst(List<T> list) {
return list.get(0);
}
3. Использование дженериков в интерфейсе:
public interface Pair<K, V> {
K getKey();
V getValue();
}
Итераторы в Java представляют собой объекты, которые позволяют
последовательно обходить элементы коллекции. Они позволяют
безопасно и эффективно перебирать элементы коллекции, не заботясь о
внутреннем устройстве коллекции. Примеры использования итераторов
в коллекциях:
1. Использование итератора для обхода элементов списка:
Iterator<String> iterator = list.iterator();
while (iterator.hasNext()) {
String fruit = iterator.next();
System.out.println(fruit);
}
2. Удаление элемента из списка с помощью итератора:
Iterator<String> iterator = list.iterator();
while (iterator.hasNext()) {
String fruit = iterator.next();
if (fruit.equals("banana")) {
iterator.remove();
}
}
Задания для выполнения лабораторной работы:
Задание 1:
Написать программу, которая считывает текстовый файл и выводит на
экран топ-10 самых часто встречающихся слов в этом файле. Для решения
задачи использовать коллекцию Map, где ключом будет слово, а
значением - количество его повторений в файле.
Пример реализации:
import java.io.File;
import java.io.FileNotFoundException;
import java.util.*;
public class TopWords {
public static void main(String[] args) {
// указываем путь к файлу
String filePath = "C:\\text.txt";
// создаем объект File
File file = new File(filePath);
// создаем объект Scanner для чтения файла
Scanner scanner = null;
try {
scanner = new Scanner(file);
} catch (FileNotFoundException e) {
e.printStackTrace();
}
// создаем объект Map для хранения слов и их количества
******
// читаем файл по словам и добавляем их в Map
******
// закрываем Scanner
******
// создаем список из элементов Map
******
// сортируем список по убыванию количества повторений
Collections.sort(list, new Comparator<Map.Entry<String, Integer>>() {
@Override
public int compare(Map.Entry<String, Integer> o1, Map.Entry<String,
Integer> o2) {
******
}
});
// выводим топ-10 слов
******
}
//выводим результат
*******
}
}
}
Задание 2:
Написать обобщенный класс Stack<T>, который реализует стек на основе
массива. Класс должен иметь методы push для добавления элемента в
стек, pop для удаления элемента из стека и peek для получения верхнего
элемента стека без его удаления.
Пример реализации:
public class Stack<T> {
private T[] data;
private int size;
public Stack(int capacity) {
data = (T[]) new Object[capacity];
size = 0;
}
public void push(T element) {
******
}
public T pop() {
******
}
public T peek() {
******
}
}
Пример использования:
Stack<Integer> stack = new Stack<>(10);
stack.push(1);
stack.push(2);
stack.push(3);
System.out.println(stack.pop());
System.out.println(stack.peek());
stack.push(4);
System.out.println(stack.pop());
Задание 3:
Необходимо разработать программу для учета продаж в магазине.
Программа должна позволять добавлять проданные товары в коллекцию,
выводить список проданных товаров, а также считать общую сумму
продаж и наиболее популярный товар.
Варианты выполнения задания: